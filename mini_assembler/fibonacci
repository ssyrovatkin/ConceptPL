mov x0, 1        // result

mov x8, 1        // fib0 = 1
mov x9, 1        // fib1 = 1

mov x10, 1       // const: 1
mov x11, 1       // const: 1

print "Enter number:"
inp x1            // n
bl .fibonacci     // call fib(n)
print "Result:"
print_r x0
EXIT

.fibonacci:
mov x12, 0        // x12 <- 0
sub x13, x1, x11  // x13 <- (n - 1)

.cycle:
cmp x13, x12      // while x12 < (n - 1) (if not, jump .end_cycle)
bLE .end_cycle

add x0, x8, x9    // result <- fib0 + fib1
movr x8, x9       // fib0 <- fib1
movr x9, x0       // fib1 <- result
add x12, x12, x10 // x12 <- x12 + 1
b .cycle          // jump .cycle

.end_cycle:
ret
